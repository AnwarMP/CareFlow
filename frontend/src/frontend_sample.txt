This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-26T08:55:26.780Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
components/
  call/
    CallInterface.tsx
  dashboard/
    CategoryProgressRing.tsx
    ComplianceDashboard.tsx
    MainProgressRing.tsx
    ProgressChart.tsx
    ThreeDayView.tsx
    WelcomeBanner.tsx
  layout/
    Layout.tsx
  timeline/
    CareTimeline.tsx
  upload/
    FullPageUpload.tsx
    UploadZone.tsx
  Navigation.tsx
  Sidebar.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  utils.ts
pages/
  Index.tsx
  NotFound.tsx
App.css
App.tsx
index.css
main.tsx
vite-env.d.ts

================================================================
Repository Files
================================================================

================
File: components/call/CallInterface.tsx
================
import React, { useState } from "react";
import { Phone, PhoneCall, PhoneOff, User, Clock, X } from "lucide-react";

enum CallState {
  IDLE,
  CALLING,
  CONNECTED,
  ENDED
}

const CallInterface: React.FC = () => {
  const [callState, setCallState] = useState<CallState>(CallState.IDLE);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [callTimer, setCallTimer] = useState<NodeJS.Timeout | null>(null);

  const startCall = () => {
    setCallState(CallState.CALLING);
    
    // Simulate connecting after 2 seconds
    setTimeout(() => {
      if (callState === CallState.CALLING) {
        setCallState(CallState.CONNECTED);
        
        // Start the call duration timer
        const timer = setInterval(() => {
          setCallDuration(prev => prev + 1);
        }, 1000);
        
        setCallTimer(timer);
      }
    }, 2000);
  };

  const endCall = () => {
    setCallState(CallState.ENDED);
    
    // Clear the call duration timer
    if (callTimer) {
      clearInterval(callTimer);
      setCallTimer(null);
    }
    
    // Reset after 3 seconds
    setTimeout(() => {
      setCallState(CallState.IDLE);
      setCallDuration(0);
    }, 3000);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' + secs : secs}`;
  };

  return (
    <>
      <button 
        onClick={() => setIsModalOpen(true)} 
        className="call-button"
        aria-label="Call patient"
      >
        <Phone className="h-6 w-6" />
      </button>
      
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl w-full max-w-md overflow-hidden shadow-xl">
            <div className="relative">
              {/* Header */}
              <div className="bg-primary-teal text-white p-4 flex justify-between items-center">
                <h2 className="text-xl font-semibold">Patient Call</h2>
                <button 
                  onClick={() => {
                    if (callState === CallState.CONNECTED) {
                      endCall();
                    } else {
                      setIsModalOpen(false);
                    }
                  }} 
                  className="text-white hover:text-gray-200"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
              
              {/* Patient info */}
              <div className="p-6">
                <div className="flex items-center mb-4">
                  <div className="bg-gray-200 p-3 rounded-full mr-4">
                    <User className="h-8 w-8 text-gray-500" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-lg">John Smith</h3>
                    <p className="text-gray-500">Patient ID: #37284</p>
                  </div>
                </div>
                
                {/* Upcoming events */}
                <div className="mb-6">
                  <h4 className="font-medium mb-2 text-gray-700">Upcoming Events</h4>
                  <div className="bg-gray-50 rounded-md p-3">
                    <p className="text-sm mb-1">
                      <span className="font-medium">9:00 AM:</span> Take Amoxicillin
                    </p>
                    <p className="text-sm mb-1">
                      <span className="font-medium">10:30 AM:</span> Physical therapy exercises
                    </p>
                    <p className="text-sm">
                      <span className="font-medium">2:00 PM:</span> Dr. Johnson appointment
                    </p>
                  </div>
                </div>
                
                {/* Call purpose */}
                <div className="mb-6">
                  <h4 className="font-medium mb-2 text-gray-700">Call Purpose</h4>
                  <select className="w-full rounded-md border-gray-300 shadow-sm focus:border-primary-teal focus:ring-primary-teal">
                    <option value="reminder">Medication Reminder</option>
                    <option value="check-in">Daily Check-In</option>
                    <option value="appointment">Appointment Confirmation</option>
                    <option value="follow-up">Follow-up Call</option>
                  </select>
                </div>
                
                {/* Call controls */}
                <div className="flex justify-center mt-6">
                  {callState === CallState.IDLE && (
                    <button 
                      onClick={startCall}
                      className="bg-primary-teal text-white rounded-full p-4 flex items-center justify-center shadow-md hover:bg-primary-light transition-colors"
                    >
                      <PhoneCall className="h-8 w-8" />
                    </button>
                  )}
                  
                  {callState === CallState.CALLING && (
                    <div className="text-center">
                      <div className="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-full mb-4">
                        Calling...
                      </div>
                      <button 
                        onClick={endCall}
                        className="bg-red-500 text-white rounded-full p-4 flex items-center justify-center shadow-md hover:bg-red-600 transition-colors"
                      >
                        <PhoneOff className="h-8 w-8" />
                      </button>
                    </div>
                  )}
                  
                  {callState === CallState.CONNECTED && (
                    <div className="text-center">
                      <div className="bg-green-100 text-green-800 px-4 py-2 rounded-full mb-4 flex items-center">
                        <Clock className="h-4 w-4 mr-2" />
                        Connected - {formatTime(callDuration)}
                      </div>
                      <button 
                        onClick={endCall}
                        className="bg-red-500 text-white rounded-full p-4 flex items-center justify-center shadow-md hover:bg-red-600 transition-colors"
                      >
                        <PhoneOff className="h-8 w-8" />
                      </button>
                    </div>
                  )}
                  
                  {callState === CallState.ENDED && (
                    <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-full">
                      Call ended - {formatTime(callDuration)}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default CallInterface;

================
File: components/dashboard/CategoryProgressRing.tsx
================
import React from "react";
import ProgressRing from "./ProgressChart";
import { LucideIcon } from "lucide-react";

interface CategoryProgressRingProps {
  title: string;
  progress: number;
  icon: LucideIcon;
}

const CategoryProgressRing = ({ title, progress, icon: Icon }: CategoryProgressRingProps) => {
  const getStatusColor = (value: number) => {
    if (value >= 75) return "#4CAF50";
    if (value >= 50) return "#FFC107";
    return "#F44336";
  };

  const getStatusClass = (value: number) => {
    if (value >= 75) return "bg-green-100 text-green-800";
    if (value >= 50) return "bg-yellow-100 text-yellow-800";
    return "bg-red-100 text-red-800";
  };

  return (
    <div className="glass-card rounded-xl p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-semibold flex items-center">
          <Icon className="w-5 h-5 mr-2" />
          {title}
        </h3>
        <span className={`text-sm font-medium px-2 py-1 rounded-full ${getStatusClass(progress)}`}>
          {progress}% Complete
        </span>
      </div>
      
      <div className="flex justify-center">
        <ProgressRing
          progress={progress}
          size={120}
          strokeWidth={10}
          color={getStatusColor(progress)}
        />
      </div>
    </div>
  );
};

export default CategoryProgressRing;

================
File: components/dashboard/ComplianceDashboard.tsx
================
import React from "react";
import { Pill, Activity, Calendar } from "lucide-react";
import CategoryProgressRing from "./CategoryProgressRing";

interface ComplianceData {
  medication: number;
  exercise: number;
  appointment: number;
}

interface ComplianceDashboardProps {
  data: ComplianceData;
}

const ComplianceDashboard: React.FC<ComplianceDashboardProps> = ({ data }) => {
  return (
    <div className="mb-8">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <CategoryProgressRing
          title="My Medications"
          progress={data.medication}
          icon={Pill}
        />
        
        <CategoryProgressRing
          title="My Exercises"
          progress={data.exercise}
          icon={Activity}
        />
        
        <CategoryProgressRing
          title="My Appointments"
          progress={data.appointment}
          icon={Calendar}
        />
      </div>
    </div>
  );
};

export default ComplianceDashboard;

================
File: components/dashboard/MainProgressRing.tsx
================
import React from "react";
import ProgressRing from "./ProgressChart";

interface MainProgressRingProps {
  progress: number;
  streak: number;
}

const MainProgressRing = ({ progress, streak }: MainProgressRingProps) => {
  const getStatusColor = (value: number) => {
    if (value >= 75) return "#4CAF50";
    if (value >= 50) return "#FFC107";
    return "#F44336";
  };

  return (
    <div className="glass-card rounded-xl p-6 flex flex-col items-center md:col-span-3">
      <div className="relative mb-2">
        <ProgressRing
          progress={progress}
          size={200}
          strokeWidth={15}
          color={getStatusColor(progress)}
        />
        <div className="absolute inset-0 flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{progress}%</span>
          <span className="text-sm text-gray-500">Recovery Journey</span>
        </div>
      </div>
      
      <div className="mt-4 bg-primary-teal/10 rounded-full px-4 py-2 flex items-center">
        <span className="text-primary-teal font-medium">{streak} Day Streak! 🔥</span>
      </div>
    </div>
  );
};

export default MainProgressRing;

================
File: components/dashboard/ProgressChart.tsx
================
import React, { useEffect, useRef } from "react";

interface ProgressRingProps {
  progress: number;
  size: number;
  strokeWidth: number;
  color: string;
  backgroundColor?: string;
  animate?: boolean;
}

const ProgressRing: React.FC<ProgressRingProps> = ({
  progress,
  size,
  strokeWidth,
  color,
  backgroundColor = "#e6e6e6",
  animate = true,
}) => {
  const circleRef = useRef<SVGCircleElement>(null);
  
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const offset = circumference - (progress / 100) * circumference;

  useEffect(() => {
    if (animate && circleRef.current) {
      circleRef.current.style.setProperty("--progress-value", `${(progress).toString()}`);
      circleRef.current.style.strokeDashoffset = `${offset}`;
    }
  }, [progress, circumference, animate, offset]);

  return (
    <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="transform -rotate-90">
      <circle
        cx={size / 2}
        cy={size / 2}
        r={radius}
        fill="none"
        stroke={backgroundColor}
        strokeWidth={strokeWidth}
      />
      <circle
        ref={circleRef}
        cx={size / 2}
        cy={size / 2}
        r={radius}
        fill="none"
        stroke={color}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeDasharray={`${circumference} ${circumference}`}
        strokeDashoffset={animate ? circumference : offset}
        className={animate ? "progress-ring-circle animate-circular-progress" : ""}
      />
    </svg>
  );
};

export default ProgressRing;

================
File: components/dashboard/ThreeDayView.tsx
================
import React, { useState } from "react";
import { Card } from "../ui/card";
import { ArrowLeft, ArrowRight, Pill, Activity, Calendar } from "lucide-react";
import { Button } from "../ui/button";
import { format, addDays } from "date-fns";

type EventType = 'medication' | 'exercise' | 'appointment';

interface Event {
  id: number;
  type: EventType;
  title: string;
  description: string;
  time: string;
  date: string;
  status: 'pending' | 'completed' | 'missed';
}

interface DayColumn {
  date: Date;
  label: string;
  events: Event[];
}

const EventCard = ({ event }: { event: Event }) => {
  const getEventIcon = (type: EventType) => {
    switch (type) {
      case 'medication':
        return <Pill className="w-5 h-5 text-primary-teal" />;
      case 'exercise':
        return <Activity className="w-5 h-5 text-accent-orange" />;
      case 'appointment':
        return <Calendar className="w-5 h-5 text-primary-light" />;
    }
  };

  return (
    <Card className="p-4 mb-4 hover:shadow-md transition-shadow bg-white">
      <div className="flex items-start gap-3">
        {getEventIcon(event.type)}
        <div className="flex-1">
          <h4 className="font-medium">{event.title}</h4>
          <p className="text-sm text-gray-600">{event.description}</p>
          <p className="text-sm text-gray-500 mt-1">{event.time}</p>
          <button className="text-sm text-primary-teal mt-2 hover:text-primary-light transition-colors">
            Mark as done
          </button>
        </div>
      </div>
    </Card>
  );
};

const ThreeDayView = () => {
  const [currentPageIndex, setCurrentPageIndex] = useState(0);
  const eventsPerPage = 3;
  const totalDays = 6;

  const sampleEvents: Event[] = [
    {
      id: 1,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '4/26/2025',
      status: 'pending'
    },
    {
      id: 2,
      type: 'exercise',
      title: 'Physical Therapy',
      description: 'Knee strengthening exercises',
      time: '2:00 PM',
      date: '4/26/2025',
      status: 'pending'
    },
    {
      id: 3,
      type: 'medication',
      title: 'Evening Medication',
      description: 'Take with dinner',
      time: '8:00 PM',
      date: '4/26/2025',
      status: 'pending'
    },
    {
      id: 4,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '4/27/2025',
      status: 'pending'
    },
    {
      id: 5,
      type: 'appointment',
      title: 'Physical Therapy Session',
      description: 'With Dr. Smith',
      time: '11:00 AM',
      date: '4/27/2025',
      status: 'pending'
    },
    {
      id: 6,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '4/28/2025',
      status: 'pending'
    },
    {
      id: 7,
      type: 'exercise',
      title: 'Walking Exercise',
      description: '30 minutes moderate pace',
      time: '4:00 PM',
      date: '4/28/2025',
      status: 'pending'
    },
    {
      id: 8,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '4/29/2025',
      status: 'pending'
    },
    {
      id: 9,
      type: 'appointment',
      title: 'Follow-up Visit',
      description: 'Progress check with Dr. Johnson',
      time: '2:30 PM',
      date: '4/29/2025',
      status: 'pending'
    },
    {
      id: 10,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '4/30/2025',
      status: 'pending'
    },
    {
      id: 11,
      type: 'exercise',
      title: 'Physical Therapy',
      description: 'Joint mobility exercises',
      time: '3:00 PM',
      date: '4/30/2025',
      status: 'pending'
    },
    {
      id: 12,
      type: 'medication',
      title: 'Morning Medication',
      description: 'Take with breakfast',
      time: '8:00 AM',
      date: '5/1/2025',
      status: 'pending'
    },
    {
      id: 13,
      type: 'appointment',
      title: 'Final Check-up',
      description: 'Review recovery progress',
      time: '10:00 AM',
      date: '5/1/2025',
      status: 'pending'
    }
  ];

  const generateDayColumns = (): DayColumn[] => {
    const days: DayColumn[] = [];
    const startDate = new Date('2025-04-26'); // Starting from today
    const startIndex = currentPageIndex * eventsPerPage;

    for (let i = 0; i < eventsPerPage; i++) {
      const currentDate = addDays(startDate, startIndex + i);
      const formattedDate = format(currentDate, 'M/d/yyyy');
      
      days.push({
        date: currentDate,
        label: format(currentDate, 'EEEE, MMM d'),
        events: sampleEvents.filter(event => event.date === formattedDate)
      });
    }
    return days;
  };

  const navigateDays = (direction: 'prev' | 'next') => {
    if (direction === 'next' && (currentPageIndex + 1) * eventsPerPage < totalDays) {
      setCurrentPageIndex(prev => prev + 1);
    } else if (direction === 'prev' && currentPageIndex > 0) {
      setCurrentPageIndex(prev => prev - 1);
    }
  };

  const isFirstPage = currentPageIndex === 0;
  const isLastPage = (currentPageIndex + 1) * eventsPerPage >= totalDays;

  return (
    <div className="relative px-8">
      <div className="absolute left-0 top-1/2 transform -translate-y-1/2">
        <Button 
          variant="ghost" 
          size="icon" 
          onClick={() => navigateDays('prev')}
          className="rounded-full shadow-sm hover:bg-gray-100"
          disabled={isFirstPage}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {generateDayColumns().map((column, index) => (
          <div key={index}>
            <h3 className="font-medium mb-4 text-gray-700">{column.label}</h3>
            <div className="space-y-4">
              {column.events.map(event => (
                <EventCard key={event.id} event={event} />
              ))}
              {column.events.length === 0 && (
                <p className="text-gray-500 text-sm">No events scheduled</p>
              )}
            </div>
          </div>
        ))}
      </div>

      <div className="absolute right-0 top-1/2 transform -translate-y-1/2">
        <Button 
          variant="ghost" 
          size="icon" 
          onClick={() => navigateDays('next')}
          className="rounded-full shadow-sm hover:bg-gray-100"
          disabled={isLastPage}
        >
          <ArrowRight className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};

export default ThreeDayView;

================
File: components/dashboard/WelcomeBanner.tsx
================
import React from "react";

const WelcomeBanner = () => {
  return (
    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 mb-6">
      <h1 className="text-2xl font-medium">
        Hello Alex, welcome to your recovery center!
      </h1>
      <p className="text-gray-500 mt-1">
        Track your progress and stay on top of your recovery journey
      </p>
    </div>
  );
};

export default WelcomeBanner;

================
File: components/layout/Layout.tsx
================
import React from "react";
import { Headset } from "lucide-react";

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-6">
      <div className="max-w-6xl mx-auto">
        <main className="pb-20">
          {children}
        </main>
      </div>
      
      <div className="fixed bottom-6 right-6">
        <button className="bg-primary-teal hover:bg-primary-teal/80 text-white rounded-full p-4 shadow-lg flex items-center transition-all">
          <Headset className="mr-2 w-5 h-5" />
          <span className="mr-2">Get Support</span>
        </button>
      </div>
    </div>
  );
};

export default Layout;

================
File: components/timeline/CareTimeline.tsx
================
import React, { useState } from "react";
import { Pill, Activity, Calendar, CheckCircle, XCircle, Clock } from "lucide-react";

interface TimelineEvent {
  id: number;
  type: 'medication' | 'exercise' | 'appointment';
  title: string;
  description: string;
  time: string;
  date: string;
  status: 'pending' | 'completed' | 'missed';
}

interface CareTimelineProps {
  events: TimelineEvent[];
}

const CareTimeline: React.FC<CareTimelineProps> = ({ events }) => {
  const [localEvents, setLocalEvents] = useState<TimelineEvent[]>(events);

  const getEventIcon = (type: string) => {
    switch (type) {
      case 'medication':
        return <Pill className="h-5 w-5" />;
      case 'exercise':
        return <Activity className="h-5 w-5" />;
      case 'appointment':
        return <Calendar className="h-5 w-5" />;
      default:
        return null;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'missed':
        return <XCircle className="h-5 w-5 text-red-500" />;
      case 'pending':
        return <Clock className="h-5 w-5 text-yellow-500" />;
      default:
        return null;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return 'Done';
      case 'missed':
        return 'Missed';
      case 'pending':
        return 'Upcoming';
      default:
        return '';
    }
  };

  const getEventClass = (type: string) => {
    switch (type) {
      case 'medication':
        return 'timeline-item-medication';
      case 'exercise':
        return 'timeline-item-exercise';
      case 'appointment':
        return 'timeline-item-appointment';
      default:
        return '';
    }
  };

  const formatDate = (dateStr: string) => {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    
    const todayStr = today.toLocaleDateString();
    const tomorrowStr = tomorrow.toLocaleDateString();
    
    if (dateStr === todayStr) return "Today";
    if (dateStr === tomorrowStr) return "Tomorrow";
    
    return dateStr;
  };

  const handleMarkCompleted = (id: number) => {
    setLocalEvents(currentEvents => 
      currentEvents.map(event => 
        event.id === id ? { ...event, status: 'completed' } : event
      )
    );
  };

  return (
    <div className="mb-8">
      <h2 className="text-2xl font-semibold mb-6">My Recovery Timeline</h2>
      
      <div className="relative">
        {localEvents.map((event) => (
          <div 
            key={event.id} 
            className={`timeline-item ${getEventClass(event.type)}`}
          >
            <div className="glass-card rounded-lg p-4 mb-4 hover:shadow-lg transition-shadow">
              <div className="flex justify-between items-start">
                <div className="flex items-start">
                  <div 
                    className={`
                      p-2 rounded-lg mr-3 
                      ${event.type === 'medication' ? 'bg-primary-teal/10 text-primary-teal' : ''} 
                      ${event.type === 'exercise' ? 'bg-accent-orange/10 text-accent-orange' : ''} 
                      ${event.type === 'appointment' ? 'bg-primary-light/10 text-primary-light' : ''}
                    `}
                  >
                    {getEventIcon(event.type)}
                  </div>
                  
                  <div>
                    <h3 className="font-semibold">{event.title}</h3>
                    <p className="text-gray-600 text-sm">{event.description}</p>
                    <p className="text-gray-500 text-sm mt-1">
                      {formatDate(event.date)} • {event.time}
                    </p>

                    {event.status === 'pending' && (
                      <button 
                        onClick={() => handleMarkCompleted(event.id)}
                        className="mt-2 text-xs bg-primary-teal/10 text-primary-teal px-3 py-1 rounded-full hover:bg-primary-teal/20 transition-colors"
                      >
                        Mark as done
                      </button>
                    )}

                    {event.status === 'completed' && (
                      <p className="mt-2 text-xs text-green-600">
                        Well done! You completed this task.
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center">
                  {getStatusIcon(event.status)}
                  <span 
                    className={`text-xs font-medium ml-1 
                      ${event.status === 'completed' ? 'text-green-500' : ''} 
                      ${event.status === 'missed' ? 'text-red-500' : ''} 
                      ${event.status === 'pending' ? 'text-yellow-500' : ''}
                    `}
                  >
                    {getStatusText(event.status)}
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CareTimeline;

================
File: components/upload/FullPageUpload.tsx
================
import React from "react";
import UploadZone from "./UploadZone";
import { Skeleton } from "@/components/ui/skeleton";

interface FullPageUploadProps {
  isLoading?: boolean;
}

const FullPageUpload: React.FC<FullPageUploadProps> = ({ isLoading = false }) => {
  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto animate-pulse">
        <div className="bg-white rounded-xl p-6 mb-6 shadow-sm border border-gray-100">
          <Skeleton className="h-8 w-64 mb-2" />
          <Skeleton className="h-4 w-80" />
        </div>
        
        <div className="mb-8">
          <Skeleton className="h-6 w-48 mb-6" />
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-3 bg-white rounded-xl p-8 flex flex-col items-center shadow-sm">
              <Skeleton className="h-48 w-48 rounded-full mb-4" />
              <Skeleton className="h-6 w-32 rounded-full" />
            </div>
            
            <div className="bg-white rounded-xl p-6 shadow-sm">
              <div className="flex justify-between mb-4">
                <Skeleton className="h-6 w-32" />
                <Skeleton className="h-6 w-20 rounded-full" />
              </div>
              <div className="flex justify-center">
                <Skeleton className="h-28 w-28 rounded-full" />
              </div>
            </div>
            
            <div className="bg-white rounded-xl p-6 shadow-sm">
              <div className="flex justify-between mb-4">
                <Skeleton className="h-6 w-32" />
                <Skeleton className="h-6 w-20 rounded-full" />
              </div>
              <div className="flex justify-center">
                <Skeleton className="h-28 w-28 rounded-full" />
              </div>
            </div>
            
            <div className="bg-white rounded-xl p-6 shadow-sm">
              <div className="flex justify-between mb-4">
                <Skeleton className="h-6 w-32" />
                <Skeleton className="h-6 w-20 rounded-full" />
              </div>
              <div className="flex justify-center">
                <Skeleton className="h-28 w-28 rounded-full" />
              </div>
            </div>
          </div>
        </div>
        
        <div>
          <Skeleton className="h-6 w-48 mb-6" />
          
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="bg-white rounded-lg p-4 shadow-sm">
                <div className="flex">
                  <Skeleton className="h-10 w-10 rounded-lg mr-3" />
                  <div className="flex-1">
                    <Skeleton className="h-5 w-40 mb-2" />
                    <Skeleton className="h-4 w-60 mb-2" />
                    <Skeleton className="h-3 w-32" />
                  </div>
                  <Skeleton className="h-6 w-20 rounded-full" />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-[80vh] flex flex-col items-center justify-center max-w-lg mx-auto py-10">
      <div className="w-full">
        <h1 className="text-3xl font-bold mb-2 text-center">Welcome to Your Recovery Assistant</h1>
        <p className="text-gray-500 text-center mb-8">
          Let's create your personalized recovery plan to help you get back on your feet
        </p>
        
        <div className="border-2 border-dashed border-gray-300 rounded-2xl p-6">
          <UploadZone />
        </div>
        
        <div className="mt-8 text-center">
          <h2 className="text-xl font-medium mb-3">How it works</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="text-primary-teal text-xl font-bold mb-2">1</div>
              <p className="text-sm">Upload your hospital discharge instructions or care plan</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="text-primary-teal text-xl font-bold mb-2">2</div>
              <p className="text-sm">We create a personalized recovery timeline for you</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="text-primary-teal text-xl font-bold mb-2">3</div>
              <p className="text-sm">Track your progress and get support when needed</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FullPageUpload;

================
File: components/upload/UploadZone.tsx
================
import React, { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Upload, FileText, Check, X, Loader2, HelpCircle } from "lucide-react";

enum UploadState {
  IDLE,
  DRAGGING,
  UPLOADING,
  SUCCESS,
  ERROR
}

const UploadZone: React.FC = () => {
  const [uploadState, setUploadState] = useState<UploadState>(UploadState.IDLE);
  const [file, setFile] = useState<File | null>(null);
  const [progress, setProgress] = useState<number>(0);
  const { toast } = useToast();

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (uploadState !== UploadState.UPLOADING && uploadState !== UploadState.SUCCESS) {
      setUploadState(UploadState.DRAGGING);
    }
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (uploadState !== UploadState.UPLOADING && uploadState !== UploadState.SUCCESS) {
      setUploadState(UploadState.IDLE);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (uploadState === UploadState.UPLOADING || uploadState === UploadState.SUCCESS) {
      return;
    }
    
    const droppedFile = e.dataTransfer.files[0];
    
    if (droppedFile && droppedFile.type === "application/pdf") {
      processPdfFile(droppedFile);
    } else {
      setUploadState(UploadState.ERROR);
      toast({
        title: "Invalid file format",
        description: "Please upload a PDF file",
        variant: "destructive"
      });
      setTimeout(() => setUploadState(UploadState.IDLE), 3000);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    
    if (selectedFile && selectedFile.type === "application/pdf") {
      processPdfFile(selectedFile);
    } else if (selectedFile) {
      setUploadState(UploadState.ERROR);
      toast({
        title: "Invalid file format",
        description: "Please upload a PDF file",
        variant: "destructive"
      });
      setTimeout(() => setUploadState(UploadState.IDLE), 3000);
    }
  };

  const processPdfFile = (pdfFile: File) => {
    setFile(pdfFile);
    setUploadState(UploadState.UPLOADING);
    
    // Simulate upload progress
    let currentProgress = 0;
    const interval = setInterval(() => {
      currentProgress += 5;
      setProgress(currentProgress);
      
      if (currentProgress >= 100) {
        clearInterval(interval);
        setUploadState(UploadState.SUCCESS);
        toast({
          title: "Upload successful",
          description: "Your recovery plan is being created",
        });
      }
    }, 200);
  };

  const resetUpload = () => {
    setFile(null);
    setProgress(0);
    setUploadState(UploadState.IDLE);
  };

  const getUploadStageText = (progress: number) => {
    if (progress < 33) return "Analyzing your document...";
    if (progress < 66) return "Extracting your care plan...";
    return "Creating your recovery timeline...";
  };

  const renderContent = () => {
    switch (uploadState) {
      case UploadState.DRAGGING:
        return (
          <div className="text-center">
            <div className="mb-4 p-3 rounded-full bg-primary-teal/10 inline-block">
              <Upload className="h-8 w-8 text-primary-teal" />
            </div>
            <p className="text-lg font-medium text-primary-teal">Release to upload</p>
            <p className="text-sm text-gray-500 mt-1">Drop your recovery plan PDF</p>
          </div>
        );
        
      case UploadState.UPLOADING:
        return (
          <div className="text-center">
            <div className="mb-4 relative">
              <svg className="w-16 h-16">
                <circle
                  cx="32"
                  cy="32"
                  r="28"
                  fill="none"
                  stroke="#e6e6e6"
                  strokeWidth="4"
                />
                <circle
                  cx="32"
                  cy="32"
                  r="28"
                  fill="none"
                  stroke="#0097A7"
                  strokeWidth="4"
                  strokeDasharray={`${2 * Math.PI * 28}`}
                  strokeDashoffset={`${2 * Math.PI * 28 * (1 - progress / 100)}`}
                  className="transform -rotate-90 origin-center transition-all duration-200"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-sm font-medium">{progress}%</span>
              </div>
            </div>
            <p className="font-medium">{getUploadStageText(progress)}</p>
            <p className="text-sm text-gray-500 mt-1">Uploading {file?.name}</p>
            <button 
              onClick={resetUpload}
              className="mt-4 text-sm text-red-500 hover:text-red-700"
            >
              Cancel
            </button>
          </div>
        );
        
      case UploadState.SUCCESS:
        return (
          <div className="text-center">
            <div className="mb-4 p-3 rounded-full bg-green-100 inline-block">
              <Check className="h-8 w-8 text-green-600" />
            </div>
            <p className="font-medium text-green-600">Upload successful!</p>
            <p className="text-sm text-gray-500 mt-1">We've created your personal recovery plan.</p>
            <button 
              onClick={resetUpload}
              className="mt-4 px-4 py-2 bg-primary-teal text-white rounded-md hover:bg-primary-light transition-colors"
            >
              Upload another file
            </button>
          </div>
        );
        
      case UploadState.ERROR:
        return (
          <div className="text-center">
            <div className="mb-4 p-3 rounded-full bg-red-100 inline-block">
              <X className="h-8 w-8 text-red-600" />
            </div>
            <p className="font-medium text-red-600">Upload failed</p>
            <p className="text-sm text-gray-500 mt-1">Please try again</p>
            <button 
              onClick={resetUpload}
              className="mt-4 px-4 py-2 bg-primary-teal text-white rounded-md hover:bg-primary-light transition-colors"
            >
              Try again
            </button>
          </div>
        );
        
      default: // IDLE
        return (
          <div className="text-center">
            <div className="mb-4 p-3 rounded-full bg-primary-teal/10 inline-block">
              <FileText className="h-8 w-8 text-primary-teal" />
            </div>
            <p className="text-lg font-medium">Add Your Recovery Plan</p>
            <p className="text-sm text-gray-500 mt-1">Drag & drop your PDF or click to browse</p>
            <p className="text-xs text-gray-400 mt-1">We accept discharge instructions and care plans from most hospitals</p>
            
            <div className="mt-6">
              <label className="px-4 py-2 bg-primary-teal text-white rounded-md hover:bg-primary-light transition-colors cursor-pointer">
                Browse files
                <input
                  type="file"
                  className="hidden"
                  accept=".pdf"
                  onChange={handleFileSelect}
                />
              </label>
            </div>
            
            <div className="mt-4 text-xs text-gray-500 flex justify-center">
              <button className="flex items-center hover:text-primary-teal transition-colors">
                <HelpCircle className="h-3 w-3 mr-1" />
                What documents can I upload?
              </button>
            </div>
          </div>
        );
    }
  };

  return (
    <div 
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      className={`
        upload-zone min-h-[250px] flex items-center justify-center rounded-xl
        ${uploadState === UploadState.DRAGGING ? 'upload-zone-active' : ''}
        ${uploadState === UploadState.UPLOADING ? 'border-primary-teal bg-primary-teal/5' : ''}
        ${uploadState === UploadState.SUCCESS ? 'border-green-500 bg-green-50' : ''}
        ${uploadState === UploadState.ERROR ? 'border-red-500 bg-red-50' : ''}
      `}
    >
      {renderContent()}
    </div>
  );
};

export default UploadZone;

================
File: components/Navigation.tsx
================
import React from "react";
import { Home, Calendar, PieChart, Pill, Hospital, HelpCircle } from "lucide-react";
import { Link } from "react-router-dom";

const Navigation: React.FC = () => {
  return (
    <nav className="bg-white shadow-sm rounded-xl p-4 mb-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <div className="p-2 rounded-full bg-primary-teal/10">
            <Home className="h-6 w-6 text-primary-teal" />
          </div>
          <h1 className="ml-2 text-xl font-bold text-primary-teal">My Recovery</h1>
        </div>
        
        <div className="hidden md:flex space-x-1">
          {[
            { name: "Dashboard", icon: Home, href: "/" },
            { name: "My Timeline", icon: Calendar, href: "/timeline" },
            { name: "My Progress", icon: PieChart, href: "/progress" },
            { name: "Medications", icon: Pill, href: "/medications" },
            { name: "Appointments", icon: Hospital, href: "/appointments" },
          ].map((item) => (
            <Link
              key={item.name}
              to={item.href}
              className="flex items-center px-3 py-2 text-gray-600 hover:bg-primary-teal/10 rounded-md transition-colors"
            >
              <item.icon className="h-5 w-5 mr-1" />
              <span>{item.name}</span>
            </Link>
          ))}
        </div>
        
        <div className="md:hidden flex space-x-1">
          {[
            { name: "Dashboard", icon: Home, href: "/" },
            { name: "Timeline", icon: Calendar, href: "/timeline" },
            { name: "Help", icon: HelpCircle, href: "/help" },
          ].map((item) => (
            <Link
              key={item.name}
              to={item.href}
              className="flex items-center p-2 text-gray-600 hover:bg-primary-teal/10 rounded-md transition-colors"
            >
              <item.icon className="h-5 w-5" />
            </Link>
          ))}
        </div>
      </div>
    </nav>
  );
};

export default Navigation;

================
File: components/Sidebar.tsx
================
import React from "react";
import { Home, Calendar, PieChart, Users, Settings, X, Activity, Pill, Hospital } from "lucide-react";

interface SidebarProps {
  open: boolean;
  setOpen: (open: boolean) => void;
}

const Sidebar: React.FC<SidebarProps> = ({ open, setOpen }) => {
  return (
    <aside
      className={`bg-sidebar fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-300 ease-in-out ${
        open ? "translate-x-0" : "-translate-x-full"
      } md:relative md:translate-x-0`}
    >
      <div className="flex flex-col h-full">
        <div className="flex items-center justify-between p-4 border-b border-sidebar-border">
          <div className="flex items-center">
            <Activity className="h-8 w-8 text-white" />
            <h1 className="ml-2 text-xl font-bold text-white">CareFlow</h1>
          </div>
          <button
            onClick={() => setOpen(false)}
            className="md:hidden text-white hover:text-gray-300 focus:outline-none"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {[
              { name: "Dashboard", icon: Home, href: "/" },
              { name: "Patient Timeline", icon: Calendar, href: "/timeline" },
              { name: "Compliance", icon: PieChart, href: "/compliance" },
              { name: "Medications", icon: Pill, href: "/medications" },
              { name: "Appointments", icon: Hospital, href: "/appointments" },
            ].map((item) => (
              <li key={item.name}>
                <a
                  href={item.href}
                  className="flex items-center px-4 py-3 text-white hover:bg-sidebar-accent rounded-md transition-colors"
                >
                  <item.icon className="h-5 w-5 mr-3" />
                  {item.name}
                </a>
              </li>
            ))}
          </ul>
        </nav>

        <div className="border-t border-sidebar-border p-4">
          <a
            href="/settings"
            className="flex items-center px-4 py-2 text-white hover:bg-sidebar-accent rounded-md transition-colors"
          >
            <Settings className="h-5 w-5 mr-3" />
            Settings
          </a>
        </div>
      </div>
    </aside>
  );
};

export default Sidebar;

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: pages/Index.tsx
================
import React, { useState, useEffect } from "react";
import Layout from "../components/layout/Layout";
import ComplianceDashboard from "../components/dashboard/ComplianceDashboard";
import ThreeDayView from "../components/dashboard/ThreeDayView";
import WelcomeBanner from "../components/dashboard/WelcomeBanner";
import FullPageUpload from "../components/upload/FullPageUpload";
import { useToast } from "@/hooks/use-toast";

const Index = () => {
  const [hasUploadedPlan, setHasUploadedPlan] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  // Simulate checking if user has already uploaded a plan
  useEffect(() => {
    const timer = setTimeout(() => {
      setHasUploadedPlan(true);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  // If we're still checking the upload status, show a simple loading state
  if (hasUploadedPlan === null) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse">Loading...</div>
      </div>
    );
  }

  // If no plan has been uploaded, show the full page upload component
  if (hasUploadedPlan === false) {
    return <FullPageUpload isLoading={isLoading} />;
  }

  // Otherwise, show the dashboard with reordered components
  return (
    <Layout>
      <WelcomeBanner />
      <div className="space-y-8">
        <div className="glass-card rounded-xl p-6">
          <ThreeDayView />
        </div>
        
        <ComplianceDashboard data={{
          medication: 85,
          exercise: 65,
          appointment: 100,
        }} />
      </div>
    </Layout>
  );
};

export default Index;

================
File: pages/NotFound.tsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

================
File: App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: App.tsx
================
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;

================
File: index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 187 100% 33%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 36 100% 50%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 187 100% 33%;

    --radius: 0.75rem;

    --sidebar-background: 187 100% 25%;
    --sidebar-foreground: 0 0% 100%;
    --sidebar-primary: 187 100% 33%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 187 50% 30%;
    --sidebar-accent-foreground: 0 0% 100%;
    --sidebar-border: 187 30% 30%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 187 100% 42%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 36 100% 50%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 187 100% 42%;
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-sans;
  }
}

@layer components {
  .glass-card {
    @apply bg-white/80 backdrop-blur-md border border-white/20 shadow-lg;
  }
  
  .progress-ring-circle {
    @apply transition-all duration-1000 ease-out transform origin-center;
  }
  
  .upload-zone {
    @apply border-2 border-dashed rounded-lg p-8 transition-all duration-300 ease-in-out;
  }
  
  .upload-zone-active {
    @apply border-primary-teal bg-primary-teal/5 animate-pulse-border;
  }
  
  .timeline-item {
    @apply relative pl-8 pb-8 border-l-2 border-gray-200 ml-4;
  }
  
  .timeline-item::before {
    @apply content-[''] absolute w-4 h-4 rounded-full bg-white border-2 border-primary-teal -left-[9px] top-0;
  }
  
  .timeline-item-medication::before {
    @apply bg-primary-teal;
  }
  
  .timeline-item-exercise::before {
    @apply bg-accent-orange;
  }
  
  .timeline-item-appointment::before {
    @apply bg-primary-light;
  }

  .call-button {
    @apply fixed bottom-6 right-6 bg-primary-teal text-white rounded-full p-4 shadow-lg hover:bg-primary-light transition-colors z-50;
  }
}

================
File: main.tsx
================
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);

================
File: vite-env.d.ts
================
/// <reference types="vite/client" />
